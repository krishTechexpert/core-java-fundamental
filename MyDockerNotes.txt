
Docker commands
_-------------------------

Docker version
Docker ps
Docker ps -a   -------> show all container id which is running and stop
Docker images  -------> show list of images
Docker stop containerID
Docker start containerID

Docker rm continer id

docker pull 

docker run = pull + container run krega

docker run hello-world


docker system prune -af   ---------- delete all container id and make empty

docker run -it(interactive) ubuntu -----> you can interact with ubuntu with current terminal (jis terminal per command chla rehy tu ab usi terminal 								per ubuntu cammand chla sekty ho) such as krishna@krishna-software-developer ls 


docker run -it --name my-ubuntu ubuntu --- > if we exist then our ubuntu has stop and exists ..data will lost then solution ?


how we can store data in ubuntu ?
 don't write exit cammand (ctrl+c) instead used that ctrl +p and ctrl + q 

 now you can come out of container and container status is running...


 Imp commands: docker exec -it my-ubuntu bash  (again we can go to my-ubuntu where last time we create some dir)


 NGINX ----> server for backend
------------------------------------

 docker run nginx

 docker run -d --name my-nginx nginx

 docker exec -it my-nginx bash 

 curl http://localhost (you can run this inside terminal)

 apt update && install curl -y


 Port binding ------------ container ko chrome browser s bind kerny k liye usd port binding

 docker run -d --name my-nginx2 -p 8080(machine port):80(tcp port you can find under PORTS when you run docker ps) nginx
docker run -d --name my-nginx2 -p 8080:80 nginx

now you can check nginx in chrome browser by localhost:8080

result: Welcome to nginx



------------- How to make docker image ----------------

create dockerfile
FROM alpine:latest
CMD echo "hello from krishna"
----------------------------


docker build -t my-image . (dot means current directory)


docker images

docker run my-image


To push docker image on docker hub(make signup on docker hub first)

on cmd: docker login
username: krishna
password

to attached tag on docker image:

docker tag my-image krishna/my-image:latest

now push:

docker push krishna/my-image:latest

check docker hub to verify if it is push or not.


------------------- demo for spring boot application ------------------


dockerfile
-------------------
FROM openjdk:21  # Base image with Java 21
WORKDIR /app     # Set working directory inside container

# Copy JAR file from local machine to container
COPY target/Docker-demo-for-spring-boot-0.0.1-SNAPSHOT.jar app.jar

EXPOSE 8080      # Expose port 8080 (Spring Boot default)

# Command to run the Spring Boot application
CMD ["java", "-jar", "app.jar"]

docker compose .yml file
------------------------

version: '3.8' # Docker Compose file format version (3.8 works with modern Docker)

# Services = containers that run as part of your app
services: # only one application run such as docker demo so 1 service run only
  app:  #Name of the first service (Spring Boot app)
    build: . # Build the Docker image from the Dockerfile in the current directory
    container_name: springboot-app # Custom name for the container (optional)
    ports: # Expose port 8080 of container on host machine (host:container)
      - "8080:8080" #port binding
    depends_on:
      - db # This app depends on the database container, so db starts first
    environment: # Set environment variables used inside the container
      SPRING_PROFILES_ACTIVE: prod # Use the "prod" profile in Spring Boot
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/dockerdb # MySQL DB URL (db = service name)
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: Kiwtech@123
    networks:
      - app-network # Connect this container to a user-defined network

  db:
    image: mysql:8 #base sql image
    container_name: mysql-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: Kiwtech@123
      MYSQL_DATABASE: dockerdb
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network

volumes:
    mysql_data: # Named volume for MySQL data to persist across container restarts

networks:
    app-network:   # Custom network for app and db to communicate privately




#ðŸ§  Summary (in plain English):
#You're defining two containers:
  # ðŸ§© One for your Spring Boot app and
  # ðŸ§© One for your MySQL database.

  #They share a custom network (app-network) so they can talk to each other
  #using service names (db).

  #You're persisting the database data using a named volume (mysql_data).

  #The app waits for the DB to start before it runs, using depends_on.

# sudo docker compose up --build

# to run in attached mode 
sudo docker compose up -d --build

to check data is stored in sql

docker exec -it mysql-db mysql -u root -p

it will show sql terminal in which you can write sql query

# to check log

docker compose logs -f app (working diector name)


































































